@page "/materie/crea"
@using Microsoft.EntityFrameworkCore
@using RegistroScolastico.Models
@using RegistroScolastico.Data
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Aggiungi Materia</PageTitle>

<div class="aggiungi-collegio-mainbox animate-fadein">
    <div class="aggiungi-collegio-container">
        <div class="aggiungi-collegio-header">
            <h2>
                <i class="fas fa-book-open me-2"></i>
                Aggiungi Nuova Materia
            </h2>
        </div>

        <EditForm Model="@NuovaMateria" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="glass-card p-4 mt-3">
                <div class="mb-4">
                    <label for="nomeMateria" class="form-label fw-semibold text-primary">
                        <i class="fas fa-pen me-1"></i> Nome Materia
                    </label>
                    <InputText id="nomeMateria" class="form-control glass-input" @bind-Value="NuovaMateria.Nome" maxlength="100" />
                    <ValidationMessage For="@(() => NuovaMateria.Nome)" />
                </div>

                <div class="mb-4">
                    <label class="form-label fw-semibold text-primary">
                        <i class="fas fa-layer-group me-1"></i> Moduli associati <span class="text-muted">(opzionale)</span>
                    </label>
                    <div class="input-group mb-2" style="max-width: 400px;">
                        <InputText placeholder="Nome nuovo modulo" class="form-control glass-input" @bind-Value="nuovoModuloNome" maxlength="100" />
                        <button type="button" class="btn btn-success glass-btn" @onclick="AggiungiModulo" title="Aggiungi Modulo">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    <div class="docenti-list-glass" style="min-height: 48px;">
                        @if (ModuliMateria.Count == 0)
                        {
                            <span class="text-muted">Nessun modulo aggiunto.</span>
                        }
                        else
                        {
                            <ul class="list-unstyled mb-0">
                                @foreach (var modulo in ModuliMateria)
                                {
                                    <li class="d-flex align-items-center mb-2 glass-list-item" style="gap: 0.5rem;">
                                        @if (modulo.Id == moduloInModificaId)
                                        {
                                            <InputText class="form-control glass-input me-2" style="max-width: 200px;" @bind-Value="moduloInModificaNome" maxlength="100" />
                                            <button type="button" class="btn btn-primary btn-sm glass-btn me-1" @onclick="() => SalvaModificaModulo(modulo)" title="Salva">
                                                <i class="fas fa-check"></i>
                                            </button>
                                            <button type="button" class="btn btn-secondary btn-sm glass-btn" @onclick="AnnullaModificaModulo" title="Annulla">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <span class="fw-semibold text-primary"><i class="fas fa-cube me-1"></i>@modulo.Nome</span>
                                            <button type="button" class="btn btn-warning btn-sm glass-btn me-1" @onclick="() => IniziaModificaModulo(modulo)" title="Modifica">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-danger btn-sm glass-btn" @onclick="() => EliminaModulo(modulo)" title="Elimina">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        }
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>

                <div class="mb-4">
                    <label class="form-label fw-semibold text-primary">
                        <i class="fas fa-chalkboard-teacher me-1"></i> Docenti che insegnano questa materia
                    </label>
                    <div class="text-muted mb-2" style="font-size:0.95em;">
                        Puoi aggiungere i docenti anche in un secondo momento dalla gestione materie.
                    </div>
                    <div class="docenti-list-glass">
                        @if (Docenti.Count == 0)
                        {
                            <div class="text-muted text-center py-2">Nessun docente disponibile.</div>
                        }
                        else
                        {
                            <div class="row">
                                @foreach (var docente in Docenti)
                                {
                                    <div class="col-md-6 col-lg-4 mb-2">
                                        <label class="docente-checkbox glass-list-item d-flex align-items-center">
                                            <input class="form-check-input me-2"
                                                   type="checkbox"
                                                   id="docente_@docente.UtenteId"
                                                   @bind="docenteSelections[docente.UtenteId]" />
                                            <span>
                                                <i class="fas fa-user-tie text-primary me-1"></i>
                                                <b>@docente.Utente?.Profilo?.Cognome @docente.Utente?.Profilo?.Nome</b>
                                            </span>
                                        </label>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(statusMessage))
                {
                    <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3">
                        <i class="fas @(isError ? "fa-exclamation-triangle" : "fa-check-circle") me-2"></i>
                        @statusMessage
                    </div>
                }

                <div class="d-flex justify-content-end gap-2 mt-4">
                    <button type="button" class="btn btn-secondary glass-btn" @onclick="GoBack">
                        <i class="fas fa-arrow-left"></i> Annulla
                    </button>
                    <button type="submit" class="btn btn-primary glass-btn">
                        <i class="fas fa-save"></i> Salva
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />

@code {
    private Materia NuovaMateria { get; set; } = new Materia();
    private List<Docente> Docenti { get; set; } = new();
    private Dictionary<int, bool> docenteSelections = new();
    private string statusMessage = string.Empty;
    private bool isError = false;

    // Moduli (solo in memoria)
    private List<Modulo> ModuliMateria { get; set; } = new();
    private string nuovoModuloNome = string.Empty;
    private int? moduloInModificaId = null;
    private string moduloInModificaNome = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Docenti = await DbContext.Docenti
            .Include(d => d.Utente)
                .ThenInclude(u => u.Profilo)
            .OrderBy(d => d.Utente.Profilo.Cognome)
            .ThenBy(d => d.Utente.Profilo.Nome)
            .ToListAsync();

        foreach (var docente in Docenti)
        {
            docenteSelections[docente.UtenteId] = false;
        }
    }

    private void AggiungiModulo()
    {
        var nome = nuovoModuloNome?.Trim();
        if (!string.IsNullOrWhiteSpace(nome) && !ModuliMateria.Any(m => m.Nome.Equals(nome, StringComparison.OrdinalIgnoreCase)))
        {
            ModuliMateria.Add(new Modulo { Nome = nome });
            nuovoModuloNome = string.Empty;
        }
    }

    private void IniziaModificaModulo(Modulo modulo)
    {
        moduloInModificaId = modulo.Id;
        moduloInModificaNome = modulo.Nome;
    }

    private void AnnullaModificaModulo()
    {
        moduloInModificaId = null;
        moduloInModificaNome = string.Empty;
    }

    private void SalvaModificaModulo(Modulo modulo)
    {
        var nome = moduloInModificaNome?.Trim();
        if (!string.IsNullOrWhiteSpace(nome) && !ModuliMateria.Any(m => m.Nome.Equals(nome, StringComparison.OrdinalIgnoreCase) && m != modulo))
        {
            modulo.Nome = nome;
            moduloInModificaId = null;
            moduloInModificaNome = string.Empty;
        }
    }

    private void EliminaModulo(Modulo modulo)
    {
        ModuliMateria.Remove(modulo);
        if (moduloInModificaId == modulo.Id)
            AnnullaModificaModulo();
    }

    private async Task HandleSubmit()
    {
        statusMessage = string.Empty;
        isError = false;

        try
        {
            NuovaMateria.DataCreazione = DateTime.Now;
            DbContext.Materie.Add(NuovaMateria);
            await DbContext.SaveChangesAsync();

            foreach (var modulo in ModuliMateria)
            {
                modulo.DataCreazione = DateTime.Now;
                DbContext.Moduli.Add(modulo);
                await DbContext.SaveChangesAsync();

                DbContext.ModuliMaterie.Add(new ModuloMateria
                    {
                        MateriaId = NuovaMateria.Id,
                        ModuloId = modulo.Id
                    });
            }
            await DbContext.SaveChangesAsync();

            var docentiAssociati = docenteSelections
                .Where(kv => kv.Value)
                .Select(kv => new MateriaClasse
                    {
                        MateriaId = NuovaMateria.Id,
                        DocenteId = kv.Key,
                        Peso = 1
                    }).ToList();

            if (docentiAssociati.Any())
            {
                DbContext.MaterieClassi.AddRange(docentiAssociati);
                await DbContext.SaveChangesAsync();
            }

            statusMessage = "Materia e moduli aggiunti con successo!";
            NavigationManager.NavigateTo("/gestione", forceLoad: true);
        }
        catch (Exception ex)
        {
            statusMessage = $"Errore durante il salvataggio: {ex.Message}";
            isError = true;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/gestione");
    }
}