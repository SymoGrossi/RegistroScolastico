@page "/studenti/modifica/{StudenteId:int}"
@using Microsoft.EntityFrameworkCore
@using RegistroScolastico.Models
@using RegistroScolastico.Data
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Modifica Studente</PageTitle>

<div class="modifica-studente-mainbox animate-fadein">
    <div class="modifica-studente-header">
        <h2>
            <i class="fas fa-user-graduate me-2"></i>
            Modifica Studente
        </h2>
        <button class="btn btn-secondary glass-btn" @onclick="GoBack" title="Torna all'elenco">
            <i class="fas fa-arrow-left"></i>
        </button>
    </div>

    @if (isLoading)
    {
        <div class="modifica-studente-loader">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Caricamento...</span>
            </div>
            <span class="ms-2">Caricamento dati studente...</span>
        </div>
    }
    else if (StudenteModel is null)
    {
        <div class="alert alert-danger glass-card mt-4">
            <i class="fas fa-exclamation-triangle me-2"></i>
            Studente non trovato.
        </div>
    }
    else
    {
        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <div class="alert @(IsError ? "alert-danger" : "alert-success") glass-card animate-fadein mt-3">
                @StatusMessage
            </div>
        }

        <EditForm Model="@StudenteModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="glass-card p-4 mt-3">
                <h5 class="mb-3 text-primary"><i class="fas fa-id-card me-2"></i> Dati Utente</h5>
                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label class="form-label fw-semibold text-primary">Username</label>
                        <InputText class="form-control glass-input" @bind-Value="StudenteModel.Utente.Username" disabled />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label class="form-label fw-semibold text-primary">Email</label>
                        <InputText class="form-control glass-input" @bind-Value="StudenteModel.Utente.Email" />
                        <ValidationMessage For="@(() => StudenteModel.Utente.Email)" />
                    </div>
                </div>

                <h5 class="mb-3 mt-4 text-primary"><i class="fas fa-user me-2"></i> Profilo</h5>
                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label class="form-label fw-semibold text-primary">Nome</label>
                        <InputText class="form-control glass-input" @bind-Value="StudenteModel.Utente.Profilo.Nome" />
                        <ValidationMessage For="@(() => StudenteModel.Utente.Profilo.Nome)" />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label class="form-label fw-semibold text-primary">Cognome</label>
                        <InputText class="form-control glass-input" @bind-Value="StudenteModel.Utente.Profilo.Cognome" />
                        <ValidationMessage For="@(() => StudenteModel.Utente.Profilo.Cognome)" />
                    </div>
                </div>
                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label class="form-label fw-semibold text-primary">Codice Fiscale</label>
                        <InputText class="form-control glass-input" @bind-Value="StudenteModel.Utente.Profilo.CodiceFiscale" />
                        <ValidationMessage For="@(() => StudenteModel.Utente.Profilo.CodiceFiscale)" />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label class="form-label fw-semibold text-primary">Data di Nascita</label>
                        <InputDate class="form-control glass-input" @bind-Value="StudenteModel.Utente.Profilo.DataNascita" />
                    </div>
                </div>
                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label class="form-label fw-semibold text-primary">Indirizzo</label>
                        <InputText class="form-control glass-input" @bind-Value="StudenteModel.Utente.Profilo.Indirizzo" />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label class="form-label fw-semibold text-primary">Telefono</label>
                        <InputText class="form-control glass-input" @bind-Value="StudenteModel.Utente.Profilo.Telefono" />
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-semibold text-primary">Info Aggiuntive</label>
                    <InputTextArea class="form-control glass-input" @bind-Value="StudenteModel.Utente.Profilo.InfoAggiuntive" />
                </div>

                <h5 class="mb-3 mt-4 text-primary"><i class="fas fa-layer-group me-2"></i> Classe</h5>
                <div class="mb-3">
                    <label class="form-label fw-semibold text-primary">Classe</label>
                    <InputSelect class="form-select glass-input" @bind-Value="StudenteModel.ClasseId">
                        <option value="">Seleziona una classe</option>
                        @foreach (var classe in Classi)
                        {
                            <option value="@classe.Id">
                                @($"{classe.Anno?.Nome} {classe.Sezione?.Nome} {classe.Corso?.Nome}")
                            </option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => StudenteModel.ClasseId)" />
                </div>

                <div class="d-flex justify-content-end gap-2 mt-4">
                    <button type="button" class="btn btn-secondary glass-btn" @onclick="GoBack">
                        <i class="fas fa-arrow-left"></i> Annulla
                    </button>
                    <button type="submit" class="btn btn-primary glass-btn">
                        <i class="fas fa-save"></i> Salva
                    </button>
                </div>
            </div>
        </EditForm>
    }
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />

@code {
    [Parameter]
    public int StudenteId { get; set; }

    private Studente? StudenteModel { get; set; }
    private List<Classe> Classi { get; set; } = new();
    private bool isLoading = true;
    private string StatusMessage = string.Empty;
    private bool IsError = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        StudenteModel = await DbContext.Studenti
            .Include(s => s.Utente)
                .ThenInclude(u => u.Profilo)
            .Include(s => s.Classe)
                .ThenInclude(c => c.Anno)
            .Include(s => s.Classe)
                .ThenInclude(c => c.Sezione)
            .Include(s => s.Classe)
                .ThenInclude(c => c.Corso)
            .FirstOrDefaultAsync(s => s.UtenteId == StudenteId);

        Classi = await DbContext.Classi
            .Include(c => c.Anno)
            .Include(c => c.Sezione)
            .Include(c => c.Corso)
            .OrderBy(c => c.Anno.Nome)
            .ThenBy(c => c.Sezione.Nome)
            .ToListAsync();

        isLoading = false;
    }

    private async Task HandleValidSubmit()
    {
        StatusMessage = string.Empty;
        IsError = false;

        try
        {
            DbContext.Studenti.Update(StudenteModel!);
            DbContext.Utenti.Update(StudenteModel!.Utente);
            await DbContext.SaveChangesAsync();
            StatusMessage = "Studente aggiornato con successo!";
            IsError = false;
            await Task.Delay(900);
            NavigationManager.NavigateTo("/studenti");
        }
        catch (DbUpdateException ex)
        {
            StatusMessage = "Errore durante il salvataggio: " + (ex.InnerException?.Message ?? ex.Message);
            IsError = true;
        }
        catch (Exception ex)
        {
            StatusMessage = "Errore inatteso: " + ex.Message;
            IsError = true;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/studenti");
    }
}